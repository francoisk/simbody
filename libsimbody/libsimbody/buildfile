windows = ($cxx.target.class == 'windows')
macos   = ($cxx.target.class == 'macos')

# Headers and source files.
#
./: lib{SimTKcommon}: SimTKcommon/hxx{**} \
                      SimTKcommon/cxx{** -tests/**}

./: lib{SimTKmath}: SimTKmath/hxx{**}                           \
                    SimTKmath/Optimizers/src/IpOpt/hxx{*.hpp}   \
                    SimTKmath/{cxx c}{** -tests/** -**/tests/**}

# Note: Exclude the Visualizer executable code (but do include the Visualizer
#       library code).
#
./: lib{SimTKsimbody}: Simbody/hxx{** -Visualizer/simbody-visualizer/**} \
                       Simbody/cxx{** -Visualizer/simbody-visualizer/** -tests/**}

# Libraries
#
sys_libs =
if! $windows
{
  if $macos
    sys_libs += -framework Accelerate # LAPACK, BLAS
  else
    sys_libs += -llapack -lblas -pthread -lrt

  sys_libs += -ldl -lm
}

lib{SimTKcommon}:  cxx.libs += $sys_libs
lib{SimTKmath}:    lib{SimTKcommon}
lib{SimTKsimbody}: lib{SimTKcommon SimTKmath}

# Prebuilt Windows libraries provided by upstream

# Work around non-Windows platforms not knowing what libi{} is.
#
# This is necessary because libi{} targets are not supposed to be explicitly
# referred to in buildfiles -- they're handled completely by build2. Therefore
# build2 only registers the libi{} target type if building for a Windows
# target.
#
if! $windows
  define libi: file

# Copy the prebuilt Windows libraries into the output directory via a number
# of ad hoc recipes.
#
# For LAPACK and BLAS, put the DLL and LIB in an ad hoc group so that build2
# will be able to find the libi{} target from the libs{} target.
#
arch_dir = ($cxx.target.cpu == 'x86_64' ? 'lib_x64' : 'lib_x86')

<libs{liblapack.dll} libi{liblapack.lib}>: \
  Platform/Windows/$arch_dir/file{liblapack.dll liblapack.lib}
% update
{{
  cp $path($<[0]) $path($>[0])
  cp $path($<[1]) $path($>[1])
}}
% clean
{{
  rm -f $path($>[0]) $path($>[1])
}}

<libs{libblas.dll} libi{libblas.lib}>: \
  Platform/Windows/$arch_dir/file{libblas.dll libblas.lib}
% update
{{
  cp $path($<[0]) $path($>[0])
  cp $path($<[1]) $path($>[1])
}}
% clean
{{
  rm -f $path($>[0]) $path($>[1])
}} 

libs{libgcc_s_sjlj-1.dll}: Platform/Windows/$arch_dir/file{libgcc_s_sjlj-1.dll}
% update
{{
  cp $path($<[0]) $path($>[0])
}}
% clean
{{
  rm -f $path($>[0])
}}

libs{libgfortran-3.dll}: Platform/Windows/$arch_dir/file{libgfortran-3.dll}
% update
{{
  cp $path($<[0]) $path($>[0])
}}
% clean
{{
  rm -f $path($>[0])
}}

libs{libquadmath-0.dll}: Platform/Windows/$arch_dir/file{libquadmath-0.dll}
% update
{{
  cp $path($<[0]) $path($>[0])
}}
% clean
{{
  rm -f $path($>[0])
}}

# Dependencies involving the prebuilt Windows libraries.
#
libs{liblapack.dll}: libs{libblas.dll}
libs{libblas.dll}:   libs{libgcc_s_sjlj-1.dll   \
                          libgfortran-3.dll     \
                          libquadmath-0.dll}

lib{SimTKcommon}: libs{liblapack.dll libblas.dll}: include = $windows

# SimTKcommon/ source subdirectories.
#
common_dirs = BigMatrix         \
              Geometry          \
              Mechanics         \
              Polynomial        \
              Random            \
              Scalar            \
              Simulation        \
              SmallMatrix

# SimTKmath/ source subdirectories.
#
math_dirs = LinearAlgebra       \
            Integrators         \
            Optimizers          \
            Geometry

# Simbody/ source subdirectories.
#
# Note that we will only be pulling in the Visualizer library headers, not the
# application headers in the simbody-visualizer/ subdirectory.
#
simbody_dirs = Visualizer

# Build options: SimTKcommon
#
common_includes = "-I$src_base/SimTKcommon/include"
for d: $common_dirs
  common_includes += "-I$src_base/SimTKcommon/$d/include"

SimTKcommon/obj{*}:                                                             \
  cxx.poptions += $common_includes                                              \
                  -DSimTK_SimTKCOMMON_AUTHORS=\"Michael.Sherman_Peter.Eastman\" \
                  -DSimTK_SimTKCOMMON_COPYRIGHT_YEARS=\"2005-10\"               \
                  -DSimTK_SimTKCOMMON_LIBRARY_NAME=SimTKcommon                  \
                  -DSimTK_SimTKCOMMON_MAJOR_VERSION="$version.major"            \
                  -DSimTK_SimTKCOMMON_MINOR_VERSION="$version.minor"            \
                  -DSimTK_SimTKCOMMON_PATCH_VERSION="$version.patch"

SimTKcommon/objs{*}: cxx.poptions += -DSimTK_SimTKCOMMON_BUILDING_SHARED_LIBRARY        \
                                     -DSimTKcommon_EXPORTS

SimTKcommon/obja{*}: cxx.poptions += -DSimTK_SimTKCOMMON_BUILDING_STATIC_LIBRARY

# Build options
#
# See README-DEV for note about warnings in the upstream build. In a nutshell:
# don't pass -Wall otherwise you won't be able to read the build output and it
# doesn't look like upstream pays much attention to warnings anyway.

# Build options: SimTKmath
#
math_includes = "-I$src_base/SimTKmath/include"
for d: $math_dirs
  math_includes += "-I$src_base/SimTKmath/$d/include"

SimTKmath/obj{*}:                                                               \
  cc.poptions += $math_includes                                                 \
                 "-I$src_base/Integrators/src/CPodes/sundials/include"          \
                 -DSimTK_SIMMATH_AUTHORS=\"Jack.Middleton_Michael.Sherman\"     \
                 -DSimTK_SIMMATH_COPYRIGHT_YEARS=\"2005-10\"                    \
                 -DSimTK_SIMMATH_LIBRARY_NAME=SimTKmath                         \
                 -DSimTK_SIMMATH_MAJOR_VERSION="$version.major"                 \
                 -DSimTK_SIMMATH_MINOR_VERSION="$version.minor"                 \
                 -DSimTK_SIMMATH_PATCH_VERSION="$version.patch"

SimTKmath/objs{*}: cc.poptions += -DSimTK_SIMMATH_BUILDING_SHARED_LIBRARY       \
                                  -DSimTKmath_EXPORTS

SimTKmath/obja{*}: cc.poptions += -DSimTK_SIMMATH_BUILDING_STATIC_LIBRARY

# Build options: SimTKsimbody
#
simbody_includes = "-I$src_base/Simbody/include"
for d: $simbody_dirs
  simbody_includes += "-I$src_base/Simbody/$d/include"

# Note that the various path/directory macros are only used to launch the
# Visualizer executable which is not supported so just use fake values for the
# sake of simplicity (and to flush out problems early).
#
Simbody/obj{*}:                                                                 \
  cxx.poptions += $simbody_includes                                             \
                  -DSimTK_SIMBODY_AUTHORS=\"Michael.Sherman_Peter.Eastman\"     \
                  -DSimTK_SIMBODY_COPYRIGHT_YEARS=\"2005-20\"                   \
                  -DSimTK_SIMBODY_LIBRARY_NAME=SimTKsimbody                     \
                  -DSimTK_SIMBODY_MAJOR_VERSION="$version.major"                \
                  -DSimTK_SIMBODY_MINOR_VERSION="$version.minor"                \
                  -DSimTK_SIMBODY_PATCH_VERSION="$version.patch"                \
                  -DSIMBODY_PATH_FROM_LIBDIR_TO_VIZ_DIR="\"nonexistent_dir\""   \
                  -DSIMBODY_VISUALIZER_INSTALL_DIR="\"nonexistent_dir\""        \
                  -DSIMBODY_VISUALIZER_REL_INSTALL_DIR="\"nonexistent_dir\""

Simbody/objs{*}: cxx.poptions += -DSimTK_SIMBODY_BUILDING_SHARED_LIBRARY        \
                                 -DSimTKsimbody_EXPORTS

Simbody/obja{*}: cxx.poptions += -DSimTK_SIMBODY_BUILDING_STATIC_LIBRARY

# Disable warnings about illegal UTF-8 characters (treated as errors on
# Windows CI).
#
# Note that Geodesic.cpp and ContactGeometry.cpp include the errant code which
# is in GeodesicEquations.h.
#
if ($cxx.class == 'msvc')
{
  SimTKmath/Geometry/src/obj{CollisionDetectionAlgorithm        \
                             Geodesic                           \
                             ContactGeometry}: cxx.coptions += /wd4828
}
else
{
  SimTKmath/Geometry/src/obj{CollisionDetectionAlgorithm        \
                             Geodesic                           \
                             ContactGeometry}: cxx.coptions += -Wno-invalid-utf8
}

# Export options: SimTKcommon
#
lib{SimTKcommon}: cxx.export.poptions = $common_includes

if $windows
  lib{SimTKcommon}: cxx.export.libs += libs{liblapack.dll libblas.dll}
else
  lib{SimTKcommon}: cxx.export.libs += $sys_libs

# Export options: SimTKmath
#
lib{SimTKmath}:
{
  cxx.export.poptions = $math_includes
  cxx.export.libs = lib{SimTKcommon}
}

# Export options: SimTKsimbody
#
lib{SimTKsimbody}:
{
  cxx.export.poptions = $simbody_includes
  cxx.export.libs = lib{SimTKcommon SimTKmath}
}

# Export options: All simbody libraries
#
liba{SimTKcommon SimTKmath SimTKsimbody}: \
  cxx.export.poptions += -DSimTK_USE_STATIC_LIBRARIES

# Export options: Prebuilt Windows libraries
#
libs{liblapack.dll}: cxx.export.libs = libs{libblas.dll}
libs{libblas.dll}:   cxx.export.libs = libs{libgcc_s_sjlj-1.dll \
                                            libgfortran-3.dll   \
                                            libquadmath-0.dll}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{SimTKcommon SimTKmath SimTKsimbody}: \
    bin.lib.version = "-$version.project_id"
else
  lib{SimTKcommon SimTKmath SimTKsimbody}: \
    bin.lib.version = "-$version.major.$version.minor"

# Installation
#
# The general header installation scheme is as follows.
#
#   The "Core", "Top", and "Internal" names are from the upstream
#   CMakeLists.txt.
#
#   <srcdir> Is the library's source directory.
#
#   <incdir> is the include directory the library's headers will be installed
#            to below include/simbody/.
#
# Core headers
#
# <srcdir>/include/h          -> include/simbody/
# <srcdir>/<subdir>/include/h -> include/simbody/
#
# Top headers
#
# <srcdir>/include/<incdir>/h          -> include/simbody/<incdir>/
# <srcdir>/<subdir>/include/<incdir>/h -> include/simbody/<incdir>/
#
# Internal headers
#
# <srcdir>/include/<incdir>/internal/h          -> include/simbody/<incdir>/internal/
# <srcdir>/<subdir>/include/<incdir>/internal/h -> include/simbody/<incdir>/internal/
#
{hxx h}{*}:
{
  install = false # Default to not installed
  install.subdirs = false
}

# SimTKcommon
#
for d: . $common_dirs
{
  # Core headers
  SimTKcommon/$d/include/hxx{*}: install = include/simbody/

  # Top headers
  SimTKcommon/$d/include/SimTKcommon/hxx{*}: \
    install = include/simbody/SimTKcommon/

  # Internal headers
  SimTKcommon/$d/include/SimTKcommon/internal/hxx{*}: \
      install = include/simbody/SimTKcommon/internal/
}

# SiMTKmath
#
for d: . $math_dirs
{
  # Core headers
  SimTKmath/$d/include/hxx{*}: install = include/simbody/

  # Top headers
  SimTKmath/$d/include/simmath/hxx{*}: install = include/simbody/simmath/

  # Internal headers
  SimTKmath/$d/include/simmath/internal/hxx{*}: \
      install = include/simbody/simmath/internal/
}

# Simbody
#
for d: . $simbody_dirs
{
  # Core headers
  Simbody/$d/include/hxx{*}: install = include/simbody/

  # Top headers
  Simbody/$d/include/simbody/hxx{*}: install = include/simbody/simbody/

  # Internal headers
  Simbody/$d/include/simbody/internal/hxx{*}: \
    install = include/simbody/simbody/internal/
}

lib{SimTKcommon SimTKmath SimTKsimbody}: cxx.pkgconfig.include = include/simbody/
